---
  # Need to test for old install, and no install.
  # If old_install, migration path, then continue.
  # If no_install, normal new install, then continue with packages.
  # https://github.com/caskroom/homebrew-cask#learn-more

  # https://github.com/caskroom/homebrew-cask/blob/master/doc/reporting_bugs/pre_bug_report.md
  # - name: Check if old homebrew-cask is installed
  #   stat: path=/usr/local/bin/brew-cask.rb
  #   register: brew_cask_installed
  - name: clean old homebrew-cask install
    shell: brew untap phinze/cask && brew untap caskroom/cask && brew uninstall --force brew-cask && brew cleanup && brew cask cleanup && brew update
    args:
      removes: /usr/local/bin/brew-cask.rb
    # when: brew_cask_installed.stat.exists == true

  # Assumes clean brew environment from here on
  - name: Install Homebrew
    shell: ruby -e "$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)"
    args:
      creates: /usr/local/bin/brew

  # Updates packages and updates homebrew first
  - name: Install some common brew packages (brew)
    homebrew: name={{ item }} state=latest update_homebrew=yes
    with_items: "{{ homebrew_packages }}"

  # @TODO: not idempotent, a stat command might be better.
  - name: Check for installed casks
    shell: brew cask list --appdir={{ application_dir }} | grep {{ item }}
    register: installed_applications
    with_items: "{{ homebrew_cask_packages }}"
    ignore_errors: true
  - name: Install apps with brew-cask
    shell: brew cask install {{ item }} --appdir={{ application_dir }}
    with_items: "{{ homebrew_cask_packages }}"
    when: "item not in installed_applications.results|map(attribute='stdout')"

  # @TODO: figure out how to do brew updates
  # - name: Install a bash script to handle brew updates
  #   template: src=brew-update
